{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import io from 'socket.io-client';\n// import './MarkDownWithServer.css';\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n// const socket = io('http://localhost:3001');\n\n// function MarkDownWithServer() {\n//   const [markdownInput, setMarkdownInput] = useState('');\n//   const [htmlOutput, setHtmlOutput] = useState('');\n//   const outputContainerRef = useRef(null);\n\n//   useEffect(() => {\n//     console.log('Connecting to socket server...');\n//     socket.on('connect', () => {\n//       console.log('Socket connected successfully');\n//     });\n\n//     socket.on('disconnect', () => {\n//       console.log('Socket disconnected');\n//     });\n\n//     socket.on('html', (html) => {\n//       console.log('Received HTML from server:', html);\n//       setHtmlOutput(html);\n//       outputContainerRef.current.scrollTop = outputContainerRef.current.scrollHeight;\n//     });\n\n//     return () => {\n//       socket.off('html');\n//     };\n//   }, []);\n\n//   const handleMarkdownChange = (e) => {\n//     const markdown = e.target.value;\n//     console.log('Markdown input changed:', markdown);\n//     setMarkdownInput(markdown);\n//     socket.emit('markdown', markdown);\n//   };\n\n//   const handleCopyCode = () => {\n//     const el = document.createElement('textarea');\n//     el.value = htmlOutput;\n//     document.body.appendChild(el);\n//     el.select();\n//     document.execCommand('copy');\n//     document.body.removeChild(el);\n//   };\n\n//   const handleRenderInNewTab = () => {\n//     const newTab = window.open();\n//     newTab.document.body.innerHTML = htmlOutput;\n//   };\n\n//   const handleWriteToFile = () => {\n//     fetch('http://localhost:3001/file/writeToFile', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ content: htmlOutput }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         console.log('File successfully written:', data);\n//         alert('File successfully written.');\n//       })\n//       .catch((error) => {\n//         console.error('Error writing file:', error);\n//       });\n//   };\n\n//   const handleSaveToMongoDb = () => {\n//       fetch('http://localhost:3001/file/writeToFileAndSaveToMongo', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ content: htmlOutput }),\n//       })\n//         .then((response) => response.json())\n//         .then((data) => {\n//           console.log('File successfully written and saved to MongoDB:', data.savedFile._id);\n//           alert('File successfully written and saved to MongoDB  with document id : ' +data.savedFile._id);\n//         })\n//         .catch((error) => {\n//           console.error('Error writing file and saving to MongoDB:', error);\n//         });\n//     };\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: 'center' }}>Markdown to HTML Converter</h1>\n//       <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start' }}>\n//         <div style={{ width: '45%', marginRight: '10px' }}>\n//           <h2 style={{ textAlign: 'center' }}>Markdown Input</h2>\n//           <textarea\n//             id=\"markdown-input\"\n//             style={{ width: '100%', height: '350px' }}\n//             value={markdownInput}\n//             onChange={handleMarkdownChange}\n//           ></textarea>\n//         </div>\n//         <div style={{ width: '45%' }}>\n//           <h2 style={{ textAlign: 'center' }}>HTML Output</h2>\n//           <div ref={outputContainerRef} style={{ overflow: 'auto', padding: '10px', border: '1px solid #ccc', height: '338px' }}>\n\n//             {htmlOutput && typeof htmlOutput === 'string' && (\n//               <>\n//                 <button className=\"copy-button\" onClick={handleCopyCode} style={{ marginBottom: '10px' }}>Copy Code</button>\n//                 <button className=\"render-button\" onClick={handleRenderInNewTab} style={{ marginBottom: '10px' }}>Render in New Tab</button>\n//                 <button className=\"write-file-button\" onClick={handleWriteToFile} style={{ marginBottom: '10px' }}>Write to File</button>\n//                 <button className=\"save-to-mongodb-button\" onClick={handleSaveToMongoDb} style={{ marginBottom: '10px' }}>Save to MongoDB</button>\n//               </>\n//             )}\n//             <SyntaxHighlighter language=\"html\" style={solarizedlight}>\n//               {htmlOutput}\n//             </SyntaxHighlighter>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MarkDownWithServer;","map":{"version":3,"names":[],"sources":["C:/Users/dineshkumar jha/Desktop/NEOKRED/client/src/components/MarkDownWithServer.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import io from 'socket.io-client';\r\n// import './MarkDownWithServer.css';\r\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\n// import { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\n// const socket = io('http://localhost:3001');\r\n\r\n// function MarkDownWithServer() {\r\n//   const [markdownInput, setMarkdownInput] = useState('');\r\n//   const [htmlOutput, setHtmlOutput] = useState('');\r\n//   const outputContainerRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     console.log('Connecting to socket server...');\r\n//     socket.on('connect', () => {\r\n//       console.log('Socket connected successfully');\r\n//     });\r\n\r\n//     socket.on('disconnect', () => {\r\n//       console.log('Socket disconnected');\r\n//     });\r\n\r\n//     socket.on('html', (html) => {\r\n//       console.log('Received HTML from server:', html);\r\n//       setHtmlOutput(html);\r\n//       outputContainerRef.current.scrollTop = outputContainerRef.current.scrollHeight;\r\n//     });\r\n\r\n//     return () => {\r\n//       socket.off('html');\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleMarkdownChange = (e) => {\r\n//     const markdown = e.target.value;\r\n//     console.log('Markdown input changed:', markdown);\r\n//     setMarkdownInput(markdown);\r\n//     socket.emit('markdown', markdown);\r\n//   };\r\n\r\n//   const handleCopyCode = () => {\r\n//     const el = document.createElement('textarea');\r\n//     el.value = htmlOutput;\r\n//     document.body.appendChild(el);\r\n//     el.select();\r\n//     document.execCommand('copy');\r\n//     document.body.removeChild(el);\r\n//   };\r\n\r\n//   const handleRenderInNewTab = () => {\r\n//     const newTab = window.open();\r\n//     newTab.document.body.innerHTML = htmlOutput;\r\n//   };\r\n\r\n//   const handleWriteToFile = () => {\r\n//     fetch('http://localhost:3001/file/writeToFile', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify({ content: htmlOutput }),\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         console.log('File successfully written:', data);\r\n//         alert('File successfully written.');\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error('Error writing file:', error);\r\n//       });\r\n//   };\r\n\r\n//   const handleSaveToMongoDb = () => {\r\n//       fetch('http://localhost:3001/file/writeToFileAndSaveToMongo', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({ content: htmlOutput }),\r\n//       })\r\n//         .then((response) => response.json())\r\n//         .then((data) => {\r\n//           console.log('File successfully written and saved to MongoDB:', data.savedFile._id);\r\n//           alert('File successfully written and saved to MongoDB  with document id : ' +data.savedFile._id);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error('Error writing file and saving to MongoDB:', error);\r\n//         });\r\n//     };\r\n    \r\n\r\n//   return (\r\n//     <div>\r\n//       <h1 style={{ textAlign: 'center' }}>Markdown to HTML Converter</h1>\r\n//       <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start' }}>\r\n//         <div style={{ width: '45%', marginRight: '10px' }}>\r\n//           <h2 style={{ textAlign: 'center' }}>Markdown Input</h2>\r\n//           <textarea\r\n//             id=\"markdown-input\"\r\n//             style={{ width: '100%', height: '350px' }}\r\n//             value={markdownInput}\r\n//             onChange={handleMarkdownChange}\r\n//           ></textarea>\r\n//         </div>\r\n//         <div style={{ width: '45%' }}>\r\n//           <h2 style={{ textAlign: 'center' }}>HTML Output</h2>\r\n//           <div ref={outputContainerRef} style={{ overflow: 'auto', padding: '10px', border: '1px solid #ccc', height: '338px' }}>\r\n          \r\n//             {htmlOutput && typeof htmlOutput === 'string' && (\r\n//               <>\r\n//                 <button className=\"copy-button\" onClick={handleCopyCode} style={{ marginBottom: '10px' }}>Copy Code</button>\r\n//                 <button className=\"render-button\" onClick={handleRenderInNewTab} style={{ marginBottom: '10px' }}>Render in New Tab</button>\r\n//                 <button className=\"write-file-button\" onClick={handleWriteToFile} style={{ marginBottom: '10px' }}>Write to File</button>\r\n//                 <button className=\"save-to-mongodb-button\" onClick={handleSaveToMongoDb} style={{ marginBottom: '10px' }}>Save to MongoDB</button>\r\n//               </>\r\n//             )}\r\n//             <SyntaxHighlighter language=\"html\" style={solarizedlight}>\r\n//               {htmlOutput}\r\n//             </SyntaxHighlighter>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default MarkDownWithServer;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}